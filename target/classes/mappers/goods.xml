<?xml version="1.0" encoding="UTF-8"?>
<!--mappers用于说明实体类中哪个变量与数据库中哪个字段是对应的,须在mybatis.xml中进行声明-->
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--注意此处的url指向mapper.dtd-->
<mapper namespace="goods">
    <!--命名空间 用于绑定Dao接口的，即面向接口编程。
        它的好处在于当使用了namespace之后就可以不用写接口实现类，业务逻辑会直接通过这个绑定寻找到相对应的SQL语句进行对应的数据处理-->
    <!--开启了二级缓存
       eviction是缓存的清除策略,当缓存对象数量达到上限后,自动触发对应算法对缓存对象清除
           1.LRU – 最近最少使用的:移除最长时间不被使用的对象。
           对象编号：O1 O2 O3 O4 .. O512
           访问次数：14 99 83 1     893
           新产生的第513个对象会替代二级缓存中访问次数最少的O4
           2.FIFO – 先进先出:按对象进入缓存的顺序来移除它们。
           3.SOFT – 软引用:移除基于垃圾回收器状态和软引用规则的对象。
           4.WEAK – 弱引用:更积极地移除基于垃圾收集器状态和弱引用规则的对象。

       flushInterval 代表间隔多长时间自动清空缓存,单位毫秒,600000毫秒 = 10分钟
       size 缓存存储上限,用于保存对象或集合(1个集合算1个对象，但通常list集合是多变的，尽量不用二级缓存)的数量上限
       readOnly 设置为true ,代表返回只读缓存,每次从缓存取出的是缓存对象本身.这种执行效率较高
                设置为false , 代表每次取出的是缓存对象的"副本",每一次取出的对象都是不同的,这种安全性较高
   -->
    <cache eviction="LRU" flushInterval="600000" size="512" readOnly="true"/>
    <select id="selectAll" resultType="com.yqm.mybatis.entity.Goods" useCache="false">
        <!-- useCache="false"代表不使用缓存，返回结果较多，对内存消耗压力大 -->
        <!--id在同一命名空间下唯一，resultType表示返回值的类型用什么封装-->
        select * from t_goods order by goods_id desc limit 10
    </select>
    <!--需要传参数给SQL语句-->

    <!--单个参数 根据int型的id查出goods-->
    <select id="selectById" parameterType="Integer" resultType="com.yqm.mybatis.entity.Goods">
        select * from t_goods where goods_id = #{value}
    </select>
    <!--参数为一个范围需要输入多个数值 根据传入的价格参数范围查出goods 使用map键值对来传参-->
    <select id="selectByPriceRange" parameterType="java.util.Map" resultType="com.yqm.mybatis.entity.Goods">
        select * from t_goods
        where current_price between #{min} and #{max}
        order by current_price
        limit 0,#{limit}
    </select>
    <!-- 利用LinkedHashMap保存多表关联结果（多表关联查询结果字段无法用已有的Goods封装对象类返回）
        MyBatis会将每一条记录包装为LinkedHashMap对象
        key是字段名  value是字段对应的值 , 字段类型根据表结构进行自动判断
        优点: 易于扩展,易于使用
        缺点: 太过灵活,无法进行编译时检查
        返回结果：字段名-字段值 {goods_id=739, title=亲润, sub_title=卓效对抗孕期干燥，……category_name=米粉, test=1}
        如果是返回类型是HashMap，则返回的结果字段顺序会根据HashCode排列比较随机
     -->
    <select id="selectGoodsMap" resultType="java.util.LinkedHashMap" flushCache="true">
        select g.* , c.category_name,'1' as test from t_goods g , t_category c
        where g.category_id = c.category_id
    </select>

    <!--ResultMap结果映射-->
    <resultMap id="rmGoods" type="com.yqm.mybatis.dto.GoodsDTO">
        <!--设置主键字段与属性映射-->
        <id property="goods.goodsId" column="goods_id"></id>
        <!--设置非主键字段与属性映射,property为实体类中属性名，column为数据库中字段名，实体类中取名按规范-->
        <result property="goods.title" column="title"></result>
        <result property="goods.originalCost" column="original_cost"></result>
        <result property="goods.currentPrice" column="current_price"></result>
        <result property="goods.discount" column="discount"></result>
        <result property="goods.isFreeDelivery" column="is_free_delivery"></result>
        <result property="goods.categoryId" column="category_id"></result>
        <result property="category.categoryId" column="category_id"></result>
        <result property="category.categoryName" column="category_name"></result>
        <result property="category.parentId" column="parent_id"></result>
        <result property="category.categoryLevel" column="category_level"></result>
        <result property="category.categoryOrder" column="category_order"></result>


        <result property="test" column="test"/>
    </resultMap>
    <select id="selectGoodsDTO" resultMap="rmGoods">
        select g.* , c.*,'1' as test from t_goods g , t_category c
        where g.category_id = c.category_id
    </select>

<!--flushCache="true"为执行该sql后强制清空缓存-->
    <insert id="insert" parameterType="com.yqm.mybatis.entity.Goods" flushCache="true">
        insert into t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES (#{title} , #{subTitle} , #{originalCost}, #{currentPrice}, #{discount}, #{isFreeDelivery}, #{categoryId})
        <selectKey resultType="Integer" keyProperty="goodsId" order="AFTER">
            <!--selectKey标签用于主键回填，此时的主键为GoodsId，在数据库中自动生成，
            因此在插入操作中没有将其插入，但为了之后的数据操作，需要把对应的GoodsId传回goods对象中
            resultType为传回的数据格式，keyProperty为实体中的goodsId属性名，
            order为执行顺序，代表前面的语句执行完后执行此处的语句
            last_insert_id()为mysql自带方法，用于查询最后一条记录的id-->
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="update" parameterType="com.yqm.mybatis.entity.Goods">
        UPDATE t_goods
        SET
            title = #{title} ,
            sub_title = #{subTitle} ,
            original_cost = #{originalCost} ,
            current_price = #{currentPrice} ,
            discount = #{discount} ,
            is_free_delivery = #{isFreeDelivery} ,
            category_id = #{categoryId}
        WHERE
            goods_id = #{goodsId}
    </update>
<!--  parameterType为传入参数类型，其中title等为goods类中属性 -->

    <delete id="delete" parameterType="Integer">
        delete from t_goods where goods_id = #{value}
    </delete>

    <select id="selectByTitle" parameterType="java.util.Map" resultType="com.yqm.mybatis.entity.Goods">
        select * from t_goods where title = #{title}
            ${order}
    </select>

<!--动态SQL 动态决定SQL语句，如淘宝查询商品时可以勾选品牌后筛选搜索结果
<where>标签是mybatis提供,相当于sql语句中的where，但如果and关键字前没有传入其他语句使得此处出现语法错误，则该标签会自动忽略and
&lt;为小于号的转义字符-->
    <select id="dynamicSQL" parameterType="java.util.Map" resultType="com.yqm.mybatis.entity.Goods">
        select * from t_goods
        <where>
            <if test="categoryId != null">
                and category_id = #{categoryId}
            </if>
            <if test="currentPrice != null">
                and current_price &lt; #{currentPrice}
            </if>
        </where>
    </select>

<!--    id和之前的映射区分开-->
    <!--
        resultMap可用于说明一对多或者多对一的映射逻辑
        id 是resultMap属性引用的标志
        type 指向One的实体(Goods)
    -->
    <resultMap id="rmGoods1" type="com.yqm.mybatis.entity.Goods">
        <id column="goods_id" property="goodsId"></id>
<!--        一对多时，用collection标签，此处是一件goods对应多个details
            collection专用于描述list集合中的数据从哪来,property指向实体中对应属性，
            select指向goods_detail.xml中的select,column代表关联列-->
        <collection property="goodsDetails" select="goodsDetail.selectByGoodsId"
        column="goods_id"/>
    </resultMap>
    <select id="selectOneToMany" resultMap="rmGoods1">
        select * from t_goods limit 0,1
-- 只提取第一条数据
    </select>

<!--    用于测试分页，xml配置的数据查询语句无需改变，在测试的java文件中需要引入PageHelper类和Page类-->
    <select id="selectPage" resultType="com.yqm.mybatis.entity.Goods">
        select * from t_goods where current_price &lt; 1000
    </select>

    <!--INSERT INTO table 批量插入-->
    <!--VALUES ("a" , "a1" , "a2"),("b" , "b1" , "b2"),(....)
    foreach标签中的属性collection规定为list不可更改，属性item为迭代变量，index为循环索引，当前是第几次循环
    separator为分割器，用于指定要插入的对象用什么来分割，如逗号：VALUES ("a" , "a1" , "a2")-->
    <insert id="batchInsert" parameterType="java.util.List">
        INSERT INTO t_goods(title, sub_title, original_cost, current_price, discount, is_free_delivery, category_id)
        VALUES
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.title},#{item.subTitle}, #{item.originalCost}, #{item.currentPrice}, #{item.discount}, #{item.isFreeDelivery}, #{item.categoryId})
        </foreach>
    </insert>

    <!--批量删除in (1901,1902)-->
    <delete id="batchDelete" parameterType="java.util.List">
        DELETE FROM t_goods WHERE goods_id in
        <foreach collection="list" item="item" index="index" open="(" close=")" separator=",">
            #{item}
        </foreach>
    </delete>

</mapper>
